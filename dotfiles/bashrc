function __currently_in_bash() {
    [[ $(ps -p $$ -oargs=) = *"bash"* ]]
}

function function_exists {
    FUNCTION_NAME=$1

    [ -z "$FUNCTION_NAME" ] && return 1

    declare -F "$FUNCTION_NAME" > /dev/null 2>&1

    return $?
}

if __currently_in_bash; then
    # add bash completion if exists
    if [ -f /usr/local/share/bash-completion/bash_completion ]; then
        . /usr/local/share/bash-completion/bash_completion
    fi

    # bash features
    shopt -s autocd
    shopt -s cdable_vars
    shopt -s checkjobs
    shopt -s checkwinsize
    shopt -s direxpand
    shopt -s dirspell
    shopt -s dotglob
    shopt -s expand_aliases
    shopt -s extglob
    shopt -s globstar
    shopt -s hostcomplete
    shopt -s histappend
    shopt -s cmdhist
    shopt -s lithist

fi

export PATH="$PATH:$HOME/.rvm/bin" # Add RVM to PATH for scripting

# use vim for basic editing
export EDITOR=vim

# Colours for ls
export CLICOLOR=1
export LSCOLORS=Gxfxcxdxbxegedabagacad

# unlimited history
export HISTFILESIZE=-1
export HISTSIZE=-1
# don't same some commands in history
HISTIGNORE='l:gst:clear:fg'

__prompt_command() {
    # init
    local EXIT_STATUS="$?"
    PS1=""

    # colours
    local CYAN="\[\e[38;5;087m\]"
    local RESET_COLORS="\[\e[0m\]"
    local RED="\[\e[38;5;009m\]"
    local BLUE="\[\e[38;5;069m\]"
    local GREEN="\[\e[38;5;156m\]"
    local YELLOW="\[\e[38;5;011m\]"

    # exit status arrow colours
    if [ $EXIT_STATUS -eq 0 ]; then
        PS1+="$GREEN"
    else
        PS1+="$RED"
    fi

    # exit status arrow and current directory
    PS1+="➜$RESET_COLORS  $CYAN\W $RESET_COLORS"

    # git
    local branch_name="$(git symbolic-ref HEAD 2>/dev/null)"
    branch_name=${branch_name##refs/heads/}
	if [ ! "$branch_name" == "" ]; then
        PS1+="${BLUE}git:(${RED}${branch_name}${BLUE})${RESET_COLORS} "
        if [[ $(git diff --stat) != '' ]]; then
            PS1+="${YELLOW}✗${RESET_COLORS} "
        fi
	fi
}
PROMPT_COMMAND=__prompt_command

# my trusty git hacks
alias g='git'
alias ga='git add'
alias gap='git add --patch'
alias gco='git checkout'
alias gst='git status'
alias gf='git fetch'
alias gp='git push'
alias gl='git pull'
alias gb='git branch'
alias wipit='git add . && git commit -nam "WIP"'
alias unwipit='git reset --soft HEAD~ && git reset'
alias gbgone='git branch -vv | grep ": gone"'
# make auto complete work with aliases
if __currently_in_bash && function_exists __git_complete; then
    __git_complete g   _git
    __git_complete gst _git_status
    __git_complete ga  _git_add
    __git_complete gap _git_add
    __git_complete gco _git_checkout
    __git_complete gf  _git_fetch
    __git_complete gp  _git_push
    __git_complete gl  _git_pull
    __git_complete gb  _git_branch
fi

# my trusty docker hakcs
alias docker_remove_all_containers='docker rm $(docker ps -a -q)'
alias docker_remove_all_images='docker rmi $(docker images -q)'
alias docker_remove_all_the_things='docker_remove_all_containers; docker_remove_all_images'

# quick aliases to help set per-repo emails for git (for use with "useConfigOnly = true" in gitconfig)
alias set_git_email_school='git config --local user.email "jastribl@edu.uwaterloo.ca"'
alias set_git_email_personal='git config --local user.email "justinastribling@gmail.com"'

# directories
alias -- -='cd -'
alias ..='cd ../'
alias ...='cd ../../'
alias ....='cd ../../../'
alias .....='cd ../../../../'
alias ......='cd ../../../../../'
# enable color support of ls
if [ -x /usr/bin/dircolors ]; then
    alias ls='ls --color=auto'
fi
alias l='ls -lah'
alias ll='ls -lh'

take () {
    mkdir -p $@ && cd ${@:$#}
}

# tmux
function _zsh_tmux_plugin_run() {
    # run a command if one was passed
    if [[ -n "$@" ]]; then
        command tmux "$@"
        return $?
    fi

    # try reattaching; if not, make a new session
    tmux has-session > /dev/null 2>&1 || tmux new-session -d -s 'main'

    # attach
    tmux attach
}
alias tmux=_zsh_tmux_plugin_run

# easy way to open a PR (defaults to PR against develop)
function PR () {
    REPO_URL=`git remote -v | grep fetch | head -1 | cut -f2 | cut -d' ' -f1 | sed -e's/git@/http:\/\//' -e's/\.git$//' | sed -E 's/(\/\/[^:]*):/\1\//'`
    BASE_BRANCH=${1:-develop}
    COMPARE_BRANCH=`git symbolic-ref --short HEAD`
    PR_URL="$REPO_URL/compare/$BASE_BRANCH...$COMPARE_BRANCH?expand=1"
    if [[ `uname -s` = "Darwin" ]]; then
        open "$PR_URL"
    else
        echo "$PR_URL"
    fi
}

if [[ -e ~/.bashrc.local ]]; then
    source ~/.bashrc.local
fi
